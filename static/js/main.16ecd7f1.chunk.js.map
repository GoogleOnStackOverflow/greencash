{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","bottle","can","recycle","str","handleClick","bind","assertThisInitialized","handleCan","handleBottle","handleRecycle","_this2","qr_str","JSON","stringify","info","log","lat","name","id","content","time","Date","getTime","ECDSA","fromJWK","kty","crv","x","y","d","then","privateKey","sign","result","console","setState","objectSpread","signature","e","target","value","react_default","a","createElement","className","Grid","Row","Col","sm","md","Jumbotron","lib_default","Button","onClick","FormGroup","controlId","ControlLabel","FormControl","type","placeholder","onChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.16ecd7f1.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport QRCode from 'qrcode.react';\nimport ECDSA from 'ecdsa-secp256r1/browser';\nimport { Button, Grid, Row, Col, FormGroup, ControlLabel, FormControl, Jumbotron } from 'react-bootstrap';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    // Don't call this.setState() here!\n    this.state = { bottle: 0, can: 0, recycle: 0, str: '' };\n    this.handleClick = this.handleClick.bind(this);\n    this.handleCan = this.handleCan.bind(this);\n    this.handleBottle = this.handleBottle.bind(this);\n    this.handleRecycle = this.handleRecycle.bind(this);\n  }\n\n  handleClick() {\n    const machineInfo = {\n      log: 121.568780,\n      lat: 25.034520,\n      name: 'GreenCash Demo No.0001',\n      id: 'DEMO0001'\n    }\n\n    let qr_str = JSON.stringify({\n      info: machineInfo,\n      content: {\n        bottle: this.state.bottle,\n        can: this.state.can,\n        recycle: this.state.recycle\n      },\n      time: (new Date()).getTime()\n    })\n\n    ECDSA.fromJWK({\n      kty: 'EC',\n      crv: 'P-256',\n      x: 'TBJBm5OHQj2EyMwZosrLNl4-yxu5mf_0AianU0vQGy0',\n      y: 'dJioz6Rh6MyeVwPBzQp_xKMjcZRT93Ql9dLDbbFwTsg',\n      d: 'ADDkdPByhN0ed3CQR_HsAuVOLe5xKO_34x0NbheRctA'\n    })\n      .then(privateKey => {\n        return privateKey.sign(qr_str);\n      })\n      .then(result => {\n        console.log(result)\n        this.setState({\n          ...this.state,\n          str: JSON.stringify({ content: qr_str, signature: result })\n        })\n      })\n  }\n\n  handleCan(e) {\n    this.setState({ can: e.target.value });\n  }\n\n  handleBottle(e) {\n    this.setState({ bottle: e.target.value });\n  }\n\n  handleRecycle(e) {\n    this.setState({ recycle: e.target.value });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n        </header>\n        <body>\n          <Grid>\n            <Row className=\"align-middle\">\n              <Col sm={4} md={8}>\n                <Jumbotron>\n                  <p> GreenCash DEMO QRcode Generator</p>\n                </Jumbotron>\n              </Col>\n            </Row>\n            <Row className=\"align-middle\">\n              <Col sm={8} md={4}>\n                <p>\n                  <QRCode className=\"align-middle\" value={this.state.str} />\n                </p>\n                <Button onClick={this.handleClick}>Generate QR Code</Button>\n              </Col>\n              <Col sm={8} md={4}>\n                <form>\n                  <FormGroup\n                    controlId=\"formBasicText\"\n                  >\n                    <ControlLabel>Amount of can</ControlLabel>\n                    <FormControl\n                      type=\"number\"\n                      value={this.state.can}\n                      placeholder=\"0\"\n                      onChange={this.handleCan}\n                    />\n                    <ControlLabel>Amount of bottle</ControlLabel>\n                    <FormControl\n                      type=\"number\"\n                      value={this.state.bottle}\n                      placeholder=\"0\"\n                      onChange={this.handleBottle}\n                    />\n                    <ControlLabel>Amount of recycle</ControlLabel>\n                    <FormControl\n                      type=\"number\"\n                      value={this.state.recycle}\n                      placeholder=\"0\"\n                      onChange={this.handleRecycle}\n                    />\n                  </FormGroup>\n                </form>\n              </Col>\n            </Row>\n          </Grid>\n        </body>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}